! function() {
    "use strict";
    var a = angular.module("btorfs.multiselect", ["btorfs.multiselect.templates"]);
    a.getRecursiveProperty = function(a, b) {
        return b.split(".").reduce(function(a, b) {
            return a ? a[b] : null
        }, a)
    }, a.directive("multiselect", ["$filter", "$document", function(b, c) {
        return {
            restrict: "AE",
            scope: {
                options: "=",
                displayProp: "@",
                idProp: "@",
                searchLimit: "=?",
                selectionLimit: "=?",
                showSelectAll: "=?",
                showUnselectAll: "=?",
                showSearch: "=?",
                defaultName : "@"
            },
            require: "ngModel",
            templateUrl: "multiselect.html",
            link: function(b, d, e, f) {
                b.selectionLimit = b.selectionLimit || 0, b.searchLimit = b.searchLimit || 25, b.searchFilter = "", b.toggleDropdown = function() {
                    b.open = !b.open
                };
                var g = function(a) {
                    d[0].contains(a.target) || b.$apply(function() {
                        b.open = !1
                    })
                };
                c.on("click", g), f.$render = function() {
                    b.selection = f.$viewValue
                }, f.$viewChangeListeners.push(function() {
                    b.selection = f.$viewValue
                }), f.$isEmpty = function(a) {
                    return a ? 0 === a.length : !0
                };
                var h = b.$watch("selection", function() {
                    f.$setViewValue(angular.copy(b.selection))
                }, !0);
                b.$on("$destroy", function() {
                    c.off("click", g), h && h()
                }), b.getButtonText = function() {
                    if (b.selection && 1 === b.selection.length) return b.getDisplay(b.selection[0]);
                    if (b.selection && b.selection.length > 1) {
                        var a;
                        return a = angular.isDefined(b.selection) ? b.selection.length : 0, 0 === a ? "Select " : a + " selected"
                    }
                    return b.defaultName
                }, b.selectAll = function() {
                    b.unselectAll(), angular.forEach(b.options, function(a) {
                        b.toggleItem(a)
                    })
                }, b.unselectAll = function() {
                    b.selection = []
                }, b.toggleItem = function(a) {
                    "undefined" == typeof b.selection && (b.selection = []);
                    var c = b.selection.indexOf(a),
                        d = -1 !== c;
                    d ? b.selection.splice(c, 1) : !d && (0 === b.selectionLimit || b.selection.length < b.selectionLimit) && (angular.isDefined(b.selection) && null != b.selection || (b.selection = []), b.selection.push(a))
                }, b.getId = function(c) {
                    return angular.isString(c) ? c : angular.isObject(c) ? a.getRecursiveProperty(c, b.idProp) : c
                }, b.getDisplay = function(c) {
                    return angular.isString(c) ? c : angular.isObject(c) ? a.getRecursiveProperty(c, b.displayProp) : c
                }, b.isSelected = function(a) {
                    var c = !1;
                    return angular.forEach(b.selection, function(d) {
                        b.getId(d) === b.getId(a) && (c = !0)
                    }), c
                }, b.search = function() {
                    var a = 0;
                    return function(c) {
                        if (a > b.searchLimit) return !2;
                        var d = b.getDisplay(c);
                        if (d) {
                            var e = d.toLowerCase().indexOf(b.searchFilter.toLowerCase()) > -1;
                            return e && a++, e
                        }
                    }
                }
            }
        }
    }])
}(), angular.module("btorfs.multiselect.templates", ["multiselect.html"]), angular.module("multiselect.html", []).run(["$templateCache", function(a) {
    a.put("multiselect.html", '<div class="btn-group" style="width: 100%">\n    <button type="button" class="form-control btn btn-default btn-block dropdown-toggle" ng-click="toggleDropdown()">\n        {{getButtonText()}}&nbsp;<span class="caret"></span></button>\n    <ul class="dropdown-menu dropdown-menu-form"\n        ng-style="{display: open ? \'block\' : \'none\'}" style="width: 100%; overflow-x: auto">\n\n        <li ng-show="showSelectAll">\n            <a ng-click="selectAll()" href="">\n                <span class="glyphicon glyphicon-ok"></span> Select All\n            </a>\n        </li>\n        <li ng-show="showUnselectAll">\n            <a ng-click="unselectAll()" href="">\n                <span class="glyphicon glyphicon-remove"></span> Unselect All\n            </a>\n        </li>\n        <li ng-show="(showSelectAll || showUnselectAll)"\n            class="divider">\n        </li>\n\n        <li role="presentation" ng-repeat="option in selection" class="active">\n            <a class="item-selected" href="" ng-click="toggleItem(option); $event.stopPropagation()">\n                <span class="glyphicon glyphicon-remove"></span>\n                {{getDisplay(option)}}\n            </a>\n        </li>\n        <li ng-show="selection.length > 0" class="divider"></li>\n\n        <li ng-show="showSearch">\n            <div class="dropdown-header">\n                <input type="text" class="form-control input-sm" style="width: 100%;"\n                       ng-model="searchFilter" placeholder="Search..."/>\n            </div>\n        </li>\n\n        <li ng-show="showSearch" class="divider"></li>\n        <li role="presentation" ng-repeat="option in options | filter:search() | limitTo: searchLimit"\n            ng-if="!isSelected(option)">\n            <a class="item-unselected" href="" ng-click="toggleItem(option); $event.stopPropagation()">\n                {{getDisplay(option)}}\n            </a>\n        </li>\n\n        <li class="divider" ng-show="selectionLimit > 1"></li>\n        <li role="presentation" ng-show="selectionLimit > 1">\n            <a>{{selection.length || 0}} / {{selectionLimit}} selected</a>\n        </li>\n\n    </ul>\n</div>')
}]);